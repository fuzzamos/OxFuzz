#=============== config
!varformat ox_var%01d
#!lineguard try { <line> } catch(e) {}
#=============== variables
#common

<prototype>=prototype
<caller>   =call
<apply>    =apply

#Function
<Function_method>=call
<Function_method>=apply
<Function_method>=bind
<Function_method>=toSource
<Function_method>=toString

<Function_property>=arguments
<Function_property>=caller
<Function_property>=length
<Function_property>=name
<Function_property>=prototype



#Array

<Array_method>=concat
<Array_method>=copyWithin
<Array_method>=every
<Array_method>=fill
<Array_method>=filter
<Array_method>=find
<Array_method>=findIndex
<Array_method>=flatMap
<Array_method>=flatten
<Array_method>=forEach
<Array_method>=includes
<Array_method>=indexOf
<Array_method>=join
<Array_method>=keys
<Array_method>=lastIndexOf
<Array_method>=map
<Array_method>=pop
<Array_method>=push
<Array_method>=reduce
<Array_method>=reduceRight
<Array_method>=reverse
<Array_method>=shift
<Array_method>=slice
<Array_method>=some
<Array_method>=sort
<Array_method>=splice
<Array_method>=toLocaleString
<Array_method>=unshift
<Array_method>=values

<Array_property>=length


#Typed Array

<typed_array>=new Int8Array(<int>)
<typed_array>=new Uint8Array(<int>)
<typed_array>=new Uint8ClampedArray(<int>)
<typed_array>=new Int16Array(<int>)
<typed_array>=new Uint16Array(<int>)
<typed_array>=new Int32Array(<int>)
<typed_array>=new Uint32Array(<int>)
<typed_array>=new Float32Array(<int>)
<typed_array>=new Float64Array(<int>)

#Array

<array>=

#Symbol

<symbol>

#Object

<object>=<array>
<object>=<symbol>
<object>=<typed_array>



#Basic type

<basic_type>=<int>
<basic_type>=<string>
<basic_type>=<double>
<basic_type>=null
<basic_type>=<symbol>

#Arguments

<arg>=<basic_type>
<arg>=<symbol>
<arg>=<object>





#=============== content
!begin lines

var <new arr_name>=new Array();

function func_1(){<arr_name>.<Array_method>();}

function func_2(){<arr_name>.<Array_method>(<arg>);}

function func_3(){<arr_name>.<Array_method>(<arg>,<arg>);}

function func_4(){<arr_name>.<Array_method>(<arg>,<arg>,<arg>);}

for(let i=0;i<2000;i++){func_1();}
for(let i=0;i<2000;i++){func_2();}
for(let i=0;i<2000;i++){func_3();}
for(let i=0;i<2000;i++){func_4();}


!end lines
